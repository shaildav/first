<apex:component >
<apex:includeScript value="{!URLFOR($Resource.AutoCompleteWithModal, '/js/jquery-1.8.0.min.js')}"  />
<apex:includeScript value="{!URLFOR($Resource.AutoCompleteWithModal, '/js/jquery-ui-1.8.24.custom.min.js')}"  />
<apex:stylesheet value="{!URLFOR($Resource.AutoCompleteWithModal,'/css/custom-theme/jquery-ui-1.8.24.custom.css')}"/>
<apex:attribute type="selectOption[]" name="selectOptionList" description="This is the selectList that will be rendered"  required="true"/>
<apex:attribute type="String" name="label" description="Label associated with the picklist" required="false"/>
<apex:attribute type="sObject" name="sObjectField" description="Field to pass the selected value to." required="true"/>
<apex:attribute type="ApexPages.Action" name="actionMethod" description="Action to fire in actionSupport."/>
<apex:attribute type="String" name="reRender" description="Ids of the fields to reRender."/>
<style>
    .ui-autocomplete {
        max-height: 200px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
        /* add padding to account for vertical scrollbar */
        padding-right: 5px;
    }
    /* IE 6 doesn't support max-height
     * we use height instead, but this forces the menu to always be this tall
     */
    * html .ui-autocomplete {
        height: 100px;
    }
    .ui-combobox {
        position: relative;
        display: inline-block;
        width:150%;
    }
    .ui-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
        /* adjust styles for IE 6/7 */
        *height: 1.7em;
        *top: 0.1em;
    }
    .ui-combobox-input {
        margin: 0;
        padding: 0.3em;
    }
    
    .ui-icon { width: 17px; height: 17px; background-image: url(/img/arrow2_picklist_right.gif); }

    </style>
    
    <script>
    (function( $ ) {
        $('select option[value$={!sObjectField}]').attr('selected','selected');
        $.widget( "ui.combobox", {
            _create: function() {
                var input,
                    self = this,
                    select = this.element.hide(),
                    selected = select.children( ":selected" ),
                    value = selected.val() ? selected.text() : "",
                    wrapper = this.wrapper = $( "<span>" )
                        .addClass( "ui-combobox" )
                        .insertAfter( select );

                input = $( "<input>" )
                    .appendTo( wrapper )
                    .val( value )
                    .addClass( "ui-state-default ui-combobox-input" )
                    .autocomplete({
                        delay: 0,
                        minLength: 0,
                        source: function( request, response ) {
                            var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
                            response( select.children( "option" ).map(function() {
                                var text = $( this ).text();
                                if ( this.value && ( !request.term || matcher.test(text) ) )
                                    return {
                                        label: text.replace(
                                            new RegExp(
                                                "(?![^&;]+;)(?!<[^<>]*)(" +
                                                $.ui.autocomplete.escapeRegex(request.term) +
                                                ")(?![^<>]*>)(?![^&;]+;)", "gi"
                                            ), "<strong>$1</strong>" ),
                                        value: text,
                                        option: this.value,
                                        id: this.id
                                    };
                            }) );
                        },
                        select: function( event, ui ) {
                            ui.item.option.selected = true;
                            $('select option:selected').attr('selected','');
                            $('select option[value=' + ui.item.option + ']').attr('selected','selected');
                            self._trigger( "selected", event, {
                                item: ui.item.option
                            });
                            $("div").each(function(){    
                                var selectedVal = $('select option:selected',this).val();
                                $('input[id$=updater]',this).val(selectedVal);    
                            });
                            $('[id$=updater][title$=' + ui.item.id + ']').trigger('change'); 
                            
                            
                            
                                
                        },
                        change: function( event, ui ) {
                            if ( !ui.item ) {
                                var matcher = new RegExp( "^" + $.ui.autocomplete.escapeRegex( $(this).val() ) + "$", "i" ),
                                    valid = false;
                                select.children( "option" ).each(function() {
                                    if ( $( this ).text().match( matcher ) ) {
                                        this.selected = valid = true;
                                        return false;
                                    }
                                });
                                if ( !valid ) {
                                    // remove invalid value, as it didn't match anything
                                    $( this ).val( "" );
                                    select.val( "" );
                                    input.data( "autocomplete" ).term = "";
                                    return false;
                                }
                            }
                        }
                    })
                    .addClass( "ui-widget ui-widget-content ui-corner-left" );
                    
                input.data( "autocomplete" )._renderItem = function( ul, item ) {
                    return $( "<li></li>" )
                        .data( "item.autocomplete", item )
                        .append( "<a>" + item.label + "</a>" )
                        .appendTo( ul );
                };

                $( "<a>" )
                    .attr( "tabIndex", -1 )
                    .attr( "title", "Show All Items" )
                    .appendTo( wrapper )
                    .button({
                        icons: {
                            primary: "ui-icon-triangle-1-s"
                        },
                        text: false
                    })
                    .removeClass( "ui-corner-all" )
                    .addClass( "ui-corner-right ui-combobox-toggle" )
                    .click(function() {
                        // close if already visible
                        if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
                            input.autocomplete( "close" );
                            return;
                        }

                        // work around a bug (likely same cause as #5265)
                        $( this ).blur();

                        // pass empty string as value to search for, displaying all results
                        input.autocomplete( "search", "" );
                        input.focus();
                    });
                    
            },

            destroy: function() {
                this.wrapper.remove();
                this.element.show();
                $.Widget.prototype.destroy.call( this );
            }
            
        });
    })( jQuery );

    $(function() {
        $( "#{!id}combobox" ).combobox();
        $( "#toggle" ).click(function() {
            $( "#{!id}combobox" ).toggle();
        });
    });
    </script>




<div class="ui-widget">
    <apex:outputLabel value="{!label}"/>
    <select id="{!id}combobox">
    <option id="{!id}" value=""></option>
        <apex:repeat value="{!selectOptionList}" var="c">
            <option id="{!id}" value="{!c.value}">{!c.label}</option>
        </apex:repeat>        
    </select>
    <span style="display:None;">
    <apex:inputText title="{!id}" id="updater" value="{!sObjectField}" rendered="true">
    <apex:actionSupport id="actionSupport" event="onchange" action="{!actionMethod}" rerender="{!reRender}" rendered="{!if((rerender == null),'false','true')}"/>
    </apex:inputText>
    </span>
</div>
</apex:component>