<apex:page showHeader="false" controller="ProfilePic" standardStylesheets="false" sidebar="false" title="Text Synchronization App" >
    <apex:includeScript value="/canvas/sdk/js/publisher.js"/>
    <h2>Room is <span id="roomname"></span></h2>
    <c:visuserlist />
    
    <script>
        // The connection url below is available in the GoInstant dashboard. It includes your Account Name
        // and Application Name (you created both when signing up). This url tells GoInstant where your
        // application and account are located in order to connect.
    
        // Url to goinstant account, replace <account-name> with yours and 
        // replace <app-name> with yours
        var url = 'https://goinstant.net/<account-name>/<app-name>';
        var userDefaults = {displayName: '{!$User.FirstName}'};
        var token = '{!userToken}';
    
        // Grab an id from the page, if none, then we will use the salesforce user id.
        // Since these are universally unique, they work well for unique room names!
        var objectid = "{!$CurrentPage.parameters.Id}";
        if (objectid === "") {
            objectid = '{!$User.Id}';
        }
        $("#roomname").html(objectid);
    
        // The token is not an OAuth token, but rather useful information that the 
        // widget expects and knows what to do with.
        var token = { user: {
                         subject: '{!$User.Id}',  // Subject, required claim
                         displayName: '{!$User.FirstName} {!$User.LastName}',  // Display Name, private claim
                         avatarUrl: '{!pic}'
                      },
                     room: objectid
                    };
 
    console.log('Page id: {!$CurrentPage.parameters.Id}');
    console.log('Page url: {!$CurrentPage.URL}');
 
    // Ok, let's connect and provide a callback. The same callback is used for success or
    // error, we just look to see if an err object was returned to handle the error.
    goinstant.connect(url, token, function (err, connection, room) {
            if (err) {
                // Could not connect to GoInstant
                throw err;
            }
            
            // Configure the room, this defines where on the page 
            // and also some initial behaviors. The two elements below
            // are actually defined in the custom component "VisUserList"
            // referenced above.
            var config = {
                room: room,
                listContainer: document.getElementById("userView"),
                expandContainer: document.getElementById("mainView"),
                collapsed: false,
                autoStart: true
            };
 
            // Create a new instance of the WebRTC widget
            var webrtc = new goinstant.widgets.WebRTC(config);
            
            // Initialize the WebRTC widget
            webrtc.initialize(function(err) {
                if (err) {
                    throw err;
                }
                // The widget should now be rendered on the page
                console.log(room);
            });
            
            // You are now connected! Let's see who else may be in the room!
            room.users.get(function(err, usersObj, context) {
                if (err) {
                    // A problem occurred during the get.
                }
 
                // An array containing the ids of users who have joined the room.
                var userIds = Object.keys(usersObj);
 
                userIds.forEach(function(id) {
                    console.log(usersObj[id].displayName + ' is in the room!');
                });
            });
        
            // The listener will fire every time another user joins the room
            room.on('join', function (userData) {
                console.log('user', userData.displayName, 'joined the lobby!');
            });
            
            // The listener will fire everytime a user leaves the Room
            room.on('leave', function (userData) {
                console.log('user', userData.displayName, 'left the lobby!');
            });
            
            // Retrieve a reference to the current users key
            var userKey = room.self();
            console.log('current users key', userKey);
            userKey.key('displayName').set('{!$User.FirstName} {!$User.LastName}');
            userKey.key('avatarUrl').set('{!pic}');
            
            // Now use that key to retrieve the current users data
            userKey.get(function(err, value, context) {
                if (err) {
                    // could not retrieve user data
                    throw err;
                }
                console.log('current user', value);
            });
            
            // The listener will be invoked every time the value of name is changed
            // by another user
            var name = room.key('name');
            var el = $('input[id="sync"]');
    
            name.on('set', function(value, context) {
                el.val(value);
            });
    
            el.on('keyup', function() {
                name.set($(this).val());
            });
        });
        
    </script>
</apex:page>